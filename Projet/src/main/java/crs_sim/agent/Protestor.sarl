/** 
 * 
 */
package crs_sim.^agent

import crs_sim.utils.ParamSimu
import crs_sim.utils.Types
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.Behaviors
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.ParticipantJoined
import io.sarl.core.ParticipantLeft
import io.sarl.core.SpaceCreated
import io.sarl.core.SpaceDestroyed
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * @author Thomas
 * 
 */
// event spawned

class Memory {
	@Accessors
	var Behavior : int
	@Accessors
	var Tolerance : int
	new(b : int , t : int){
		this.Behavior = b
		this.Tolerance = t
	}
}

agent Protestor {
	uses Logging
	uses Behaviors
	uses DefaultContextInteractions
	
	var P : Panic
	var N : Neutral
	var A : Aggressive
	var currBeh : Types

	
	var memory : Memory

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		//info("The agent Protester was started.")
	
		
		this.memory = new Memory(occurrence.parameters.get(0) as Integer, occurrence.parameters.get(1) as Integer)
		
		//info(this.memory.getBehavior() + " " + this.memory.getTolerance())
		
		if (this.memory.getBehavior() < ParamSimu.maxPanic) {
			this.P = new Panic(this, memory)
			this.P.registerBehavior
			this.currBeh = Types.protestor_panic
		}
		else if (this.memory.getBehavior() > ParamSimu.minAggressive) {
			this.A = new Aggressive(this,memory)
			this.A.registerBehavior
			this.currBeh = Types.protestor_agg
		}
		else{
			this.N = new Neutral(this,memory)
			this.N.registerBehavior
			this.currBeh = Types.protestor_neutral
		}
		//var envID : UUID = occurrence.parameters.get(2) as UUID
		//emit(new spawned)[it.UUID == envID]
	}
	
	def changeBehavior(newBeh : Types):void{
		if(this.currBeh == Types.protestor_panic)
		{this.P.unregisterBehavior}
		else if(this.currBeh == Types.protestor_agg)
		{this.A.unregisterBehavior}
		else
		{this.N.unregisterBehavior}
		
		if (newBeh == Types.protestor_panic) 
		{
			this.P = new Panic(this, memory)
			this.P.registerBehavior
		}
		else if (newBeh == Types.protestor_agg) 
		{
			this.A = new Aggressive(this, memory)
			this.A.registerBehavior
		}
		else 
		{
			this.N = new Neutral(this, memory)
			this.N.registerBehavior
		}
		this.currBeh = newBeh
		//println(memory.getBehavior()+" LA")
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent Protester was stopped.")
	}



	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on SpaceCreated {
		// Event trigger when a space is created into one of the contexts where the agent is.
	}

	on SpaceDestroyed {
		// Event trigger when a space is destroyed from one of the contexts where the agent is.
	}

	on ParticipantJoined {
		// Event trigger when a participant has joined a space.
	}

	on ParticipantLeft {
		// Event trigger when a participant has left a space.
	}
}
