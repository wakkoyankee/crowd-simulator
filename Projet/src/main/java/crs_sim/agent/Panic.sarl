/** 
 * 
 */
package crs_sim.^agent

import crs_sim.environment.Influence
import crs_sim.environment.InfluenceEvent
import crs_sim.environment.PerceptionEvent
import crs_sim.utils.Types
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.ParticipantJoined
import io.sarl.core.ParticipantLeft
import io.sarl.core.SpaceCreated
import io.sarl.core.SpaceDestroyed
import io.sarl.lang.core.Agent
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/** 
 * @author hadrien
 * 
 */
behavior Panic {
	uses Logging
	uses DefaultContextInteractions
	
	var memory : Memory
	var moveS : MovementSkill
	
	new (owner : Agent, memory : Memory) {
		super(owner)
		this.memory = memory
	}
	
	on Initialize {
		// Event trigger before the behavior begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("Panic behavior was started.")
		this.moveS = new MovementSkill
		setSkill(this.moveS)
	}

	on PerceptionEvent {
		info("Panic hello")
		info("Time : " + occurrence.time)
//		var move : Vector2d = this.moveS.influenceKinematic(3)
		//emit(new InfluenceEvent(owner.getID(), Types.protestor_panic, move))[it.UUID == occurrence.source.UUID]



		//var move : Vector2d = this.moveS.influenceKinematic(3)
		//var influence : Influence = new Influence(getID(), Types.protestor_panic, move)
		//emit(new InfluenceEvent(influence))[it.UUID == occurrence.source.UUID]

		//preprocessing
		//movememnt
		// comment register  les skills etc..
		//changement sur l'agent
		
	}

	on Destroy {
		// Event trigger when the behavior is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("Panic behavior was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a behavior of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a behavior of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on SpaceCreated {
		// Event trigger when a space is created into one of the contexts where the agent is.
	}

	on SpaceDestroyed {
		// Event trigger when a space is destroyed from one of the contexts where the agent is.
	}

	on ParticipantJoined {
		// Event trigger when a participant has joined a space.
	}

	on ParticipantLeft {
		// Event trigger when a participant has left a space.
	}
}
