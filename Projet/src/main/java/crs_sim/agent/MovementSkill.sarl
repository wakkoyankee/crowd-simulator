/** 
 * 
 */
package crs_sim.^agent

import crs_sim.environment.Percept
import crs_sim.utils.ParamSimu
import crs_sim.utils.Types
import io.sarl.core.Logging
import java.util.ArrayList
import org.arakhne.afc.math.geometry.d2.d.Circle2d
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d
import org.arakhne.afc.math.geometry.d2.d.Shape2d
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/** 
 * @author hadrien
 * 
 */
skill MovementSkill implements MovementCapacity {
	uses Logging

	def install {
		// Function invoked when the skill is installed in the owner.
		// You should put all the initialization statements in this block of code.
		info("Installing the skill")
	}

	def prepareUninstallation {
		// Function invoked when the skill is preparing to be uninstalled from the owner, but before the owner is destroyed.
		// You should put all the resource release statements that should be executed before the owner is destroyed.
		info("Preparing the uninstallation of the skill")
	}

	def uninstall {
		// Function invoked when the skill is uninstalled from the owner, and after the owner is destroyed.
		// You should put all the resource release statements in this block of code.
		info("Uninstalling the skill")
	}

	override influenceKinematic(position : Circle2d, ListOfTarget : ArrayList<Percept>, obj : Rectangle2d) : Vector2d {
		// TODO Auto-generated code.
//		println("SKILL APPELLE" + i)
//		return new Vector2d(1, 1)
		
		var v = new Vector2d(obj.getMinX() - position.getX(), obj.getMinY() - position.getY());
		v.setX(v.getX() / ((v.getX() + v.getY()) / ParamSimu.TargetForce))
		v.setY(v.getY() / ((v.getX() + v.getY()) / ParamSimu.TargetForce))
		for (target : ListOfTarget) {
			if (target.getName() == Types.protestor_panic){
				var shape : Circle2d = target.getShape() as Circle2d
				v.setX(ParamSimu.PanicForce * (position.getX() - shape.getX()) + v.getX())
				v.setY(ParamSimu.PanicForce * (position.getY() - shape.getY()) + v.getY())	
			}
			if (target.getName() == Types.protestor_neutral) {
				var shape : Circle2d = target.getShape() as Circle2d
				v.setX(ParamSimu.NeutralForce * (position.getX() - shape.getX()) + v.getX())
				v.setY(ParamSimu.NeutralForce * (position.getY() - shape.getY()) + v.getY())
			}
			if (target.getName() == Types.protestor_agg) {
				var shape : Circle2d = target.getShape() as Circle2d
				v.setX(ParamSimu.AgressiveForce * (position.getX() - shape.getX()) + v.getX())
				v.setY(ParamSimu.AgressiveForce * (position.getY() - shape.getY()) + v.getY())	
			}
			if (target.getName() == Types.building) {
				var shape : Rectangle2d = target.getShape() as Rectangle2d
//				v.setX(ParamSimu.BuildingForce * (position.getX() - shape.getX()) + v.getX())
//				v.setY(ParamSimu.BuildingForce * (position.getY() - shape.getY()) + v.getY())	
			}
		}
		return v;
		
	}
}
