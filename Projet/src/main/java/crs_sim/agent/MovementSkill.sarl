/** 
 * 
 */
package crs_sim.^agent

import crs_sim.environment.Percept
import crs_sim.utils.ParamSimu
import crs_sim.utils.Types
import io.sarl.core.Logging
import java.util.ArrayList
import org.arakhne.afc.math.geometry.d2.d.Circle2d
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/** 
 * @author hadrien
 * 
 */
skill MovementSkill implements MovementCapacity {
	uses Logging

	def install {
		// Function invoked when the skill is installed in the owner.
		// You should put all the initialization statements in this block of code.
		//info("Installing the skill")
	}

	def prepareUninstallation {
		// Function invoked when the skill is preparing to be uninstalled from the owner, but before the owner is destroyed.
		// You should put all the resource release statements that should be executed before the owner is destroyed.
		//info("Preparing the uninstallation of the skill")
	}

	def uninstall {
		// Function invoked when the skill is uninstalled from the owner, and after the owner is destroyed.
		// You should put all the resource release statements in this block of code.
		//info("Uninstalling the skill")
	}
	
	def distance_vector(V : Vector2d) : double {
		return Math.sqrt(V.getX() ** 2 + V.getY() ** 2)
	}
	
	def percent_distance_vector(V : Vector2d, T : float) : double{
		return distance_vector(V) / T
	}
	
	def normalize_vector(V : Vector2d, T : double){
		V.setX((V.getX() / (Math.abs(V.getX()) + Math.abs(V.getY()))) * T)
		V.setY((V.getY() / (Math.abs(V.getX()) + Math.abs(V.getY()))) * T)
	}
	
	def normal_building(R : Rectangle2d, P : Circle2d, V : Vector2d){
		if (P.getX() == R.getMaxX() && P.getY() < R.getMaxY() && P.getY() > R.getMinY()){
			if (V.getX() < 0){
				V.setX(0)
				V.setY(ParamSimu.Speed)
			}
		}
		else if (P.getX() == R.getMinX() && P.getY() < R.getMaxY() && P.getY() > R.getMinY()){
			if (V.getX() > 0){
				V.setX(0)
				V.setY(ParamSimu.Speed)
			}
		}
		if (P.getY() == R.getMaxY() && P.getX() < R.getMaxX() && P.getX() > R.getMinX()){
			if (V.getY() < 0){
				V.setY(0)
				V.setX(ParamSimu.Speed)
			}
		}
		else if (P.getY() == R.getMinY() && P.getX() < R.getMaxX() && P.getX() > R.getMinX()){
			if (V.getY() > 0){
				V.setY(0)
				V.setX(ParamSimu.Speed)
			}
		}
	}
	
	def colision_building(R : Rectangle2d, P : Circle2d, V : Vector2d){
		var C = new Point2d(P.getX() + V.getX(), P.getY() + V.getY())
		if (C.getX() <= R.getMaxX() && C.getX() >= R.getMinX() && C.getY() <= R.getMaxY() && C.getY() >= R.getMinY()){
			if (P.getX() > R.getMaxX){
				V.setX(V.getX()*(Math.abs(R.getMaxX() - P.getX()) / V.getX()))
				V.setY(V.getY()*(Math.abs(R.getMaxX() - P.getX()) / V.getX()))
			}
			else if (P.getX() < R.getMinX){
				V.setX(V.getX()*(Math.abs(R.getMinX() - P.getX()) / V.getX()))
				V.setY(V.getY()*(Math.abs(R.getMinX() - P.getX()) / V.getX()))
			}
			else if (P.getY() > R.getMaxY){
				V.setX(V.getX()*(Math.abs(R.getMaxY() - P.getY()) / V.getY()))
				V.setY(V.getY()*(Math.abs(R.getMaxY() - P.getY()) / V.getY()))
			}
			else if (P.getY() < R.getMinY){
				V.setX(V.getX()*(Math.abs(R.getMinY() - P.getY()) / V.getY()))
				V.setY(V.getY()*(Math.abs(R.getMinY() - P.getY()) / V.getY()))
			}
		}
		
	}
	
	def protestor(v : Vector2d, target : Percept, position : Circle2d, perception : float, typeforce : float){
		var shape : Circle2d = target.getShape() as Circle2d
		var V : Vector2d = new Vector2d(position.getX() - shape.getX(), position.getY() - shape.getY())
		var P : double = (1 - percent_distance_vector(V, perception))
		if (position.getX() == shape.getX() && position.getY() == shape.getY()){
			V.setX(0)
			V.setY(0)
		}
		else {
		normalize_vector(V, typeforce)
		v.setX((V.getX() * P) + v.getX())
		v.setY((V.getY() * P) + v.getY())
				
		}
	}
	
	def build(v : Vector2d, target : Percept, position : Circle2d, perception : float, typeforce : float){
		var shape : Rectangle2d = target.getShape() as Rectangle2d	
		if (position.getX() < shape.getMinX()) {
			if (position.getY() < shape.getMinY()) { // pointe sud ouest du rectangle
				var V : Vector2d = new Vector2d(position.getX() - shape.getMinX(), position.getY() - shape.getMinY())
			 	var P : double = (1 - percent_distance_vector(V, perception))
				normalize_vector(V, typeforce)
				v.setX((V.getX() * P) + v.getX())
				v.setY((V.getY() * P) + v.getY())
			}
			else if (position.getY() > shape.getMaxY()) { // pointe nord ouest du rectangle
				var V : Vector2d = new Vector2d(position.getX() - shape.getMinX(), position.getY() - shape.getMaxY())
			 	var P : double = (1 - percent_distance_vector(V, perception))
				normalize_vector(V, typeforce)
				v.setX((V.getX() * P) + v.getX())
				v.setY((V.getY() * P) + v.getY())
			}
			else { // cote ouest du rectangle
				var V : Vector2d = new Vector2d(position.getX() - shape.getMinX(), 0)
			 	var P : double = (1 - percent_distance_vector(V, perception))
				V.setX(V.getX() / ((Math.abs(V.getX()) + Math.abs(V.getY())) / typeforce))
				v.setX((V.getX() * P) + v.getX())
			}
		}
		else if (position.getX() > shape.getMaxX()) {
			if (position.getY() < shape.getMinY()) { // pointe sud est du rectangle
				var V : Vector2d = new Vector2d(position.getX() - shape.getMaxX(), position.getY() - shape.getMinY())
			 	var P : double = (1 - percent_distance_vector(V, perception))
				normalize_vector(V, typeforce)
				v.setX((V.getX() * P) + v.getX())
				v.setY((V.getY() * P) + v.getY())
			}
			 else if (position.getY() > shape.getMaxY()) { // pointe nord est du rectangle
				var V : Vector2d = new Vector2d(position.getX() - shape.getMaxX(), position.getY() - shape.getMaxY())
			 	var P : double = (1 - percent_distance_vector(V, perception))
				normalize_vector(V, typeforce)
				v.setX((V.getX() * P) + v.getX())
				v.setY((V.getY() * P) + v.getY())
			}
			 else { // cote est du rectangle
				var V : Vector2d = new Vector2d(position.getX() - shape.getMaxX(), 0)
			 	var P : double = (1 - percent_distance_vector(V, perception))
				V.setX(V.getX() / ((Math.abs(V.getX()) + Math.abs(V.getY())) / typeforce))
				v.setX((V.getX() * P) + v.getX())
			}
		}
		else {
			if (position.getY() < shape.getMinY()) { // cote sud du rectangle
				var V : Vector2d = new Vector2d(0, position.getY() - shape.getMinY())
			 	var P : double = (1 - percent_distance_vector(V, perception))
				V.setY(V.getY() / ((Math.abs(V.getX()) + Math.abs(V.getY())) / typeforce))
				v.setY((V.getY() * P) + v.getY())
			}
			else { // cote nord du rectangle
				var V : Vector2d = new Vector2d(0, position.getY() - shape.getMaxY())
			 	var P : double = (1 - percent_distance_vector(V, perception))
				V.setY(V.getY() / ((Math.abs(V.getX()) + Math.abs(V.getY())) / typeforce))
				v.setY((V.getY() * P) + v.getY())
			}
		}
	}

	def SocialModelForce(position : Circle2d, ListOfTarget : ArrayList<Percept>, obj : Rectangle2d, panic : float, neutral : float, agressive : float, crs : float, building : float, destroyable : float, speed : double, perception : float, arrival : float) : Vector2d {
		var v = new Vector2d(obj.getMinX() - position.getX(), obj.getMinY() - position.getY());
		normalize_vector(v, arrival)
		
		for (target : ListOfTarget) {
			if (target.getName() == Types.protestor_panic) {
				protestor(v, target, position, perception, panic)
			}
			if (target.getName() == Types.protestor_neutral) {
				protestor(v, target, position, perception, neutral)
			}
			if (target.getName() == Types.protestor_agg) {
				protestor(v, target, position, perception, agressive)
			}
			if (target.getName() == Types.crs) {
				protestor(v, target, position, perception, crs)
			}
			if (target.getName() == Types.building) {
				build(v, target, position, perception, building)
			}
			if (target.getName() == Types.destroyable) {
				build(v, target, position, perception, destroyable)
			}
		}
		normalize_vector(v, speed)
		
		for (target : ListOfTarget) {
			if (target.getName() == Types.building || target.getName() == Types.destroyable) {
				var shape : Rectangle2d = target.getShape() as Rectangle2d
				
				normal_building(shape, position, v)
				colision_building(shape, position, v)
			}
		}
		
		
		
		return v;
		
	}
	
	override influenceKinematic(position : Circle2d, ListOfTarget : ArrayList<Percept>, obj : Rectangle2d, type : Types) : Vector2d {
		if (type == Types.protestor_panic){
			SocialModelForce(position, ListOfTarget, obj, ParamSimu.PanicOnPanic, ParamSimu.NeutralOnPanic, ParamSimu.AgressiveOnPanic, ParamSimu.CRSOnPanic, ParamSimu.BuildingForce, ParamSimu.BuildingForce, ParamSimu.Speed, ParamSimu.RadiusPerceptProtestor, ParamSimu.TargetPanic)
		}
		else if (type == Types.protestor_neutral){
			SocialModelForce(position, ListOfTarget, obj, ParamSimu.PanicOnNeutral, ParamSimu.NeutralOnNeutral, ParamSimu.AgressiveOnNeutral, ParamSimu.CRSOnNeutral, ParamSimu.BuildingForce, ParamSimu.BuildingForce, ParamSimu.Speed, ParamSimu.RadiusPerceptProtestor, ParamSimu.TargetNeutral)
		}
		else if (type == Types.protestor_agg){
			SocialModelForce(position, ListOfTarget, obj, ParamSimu.PanicOnAgressive, ParamSimu.NeutralOnAgressive, ParamSimu.AgressiveOnAgressive, ParamSimu.CRSOnAgressive, ParamSimu.BuildingForce, ParamSimu.DestroyableOnAgressive, ParamSimu.Speed, ParamSimu.RadiusPerceptProtestor, ParamSimu.TargetAgressive)
		}
		else if (type == Types.crs){
			SocialModelForce(position, ListOfTarget, obj, ParamSimu.PanicOnCrs, ParamSimu.NeutralOnCrs, ParamSimu.AgressiveOnCrs, ParamSimu.CRSOnCrs, ParamSimu.BuildingForce, ParamSimu.BuildingForce, ParamSimu.Speed, ParamSimu.RadiusPerceptCrs, ParamSimu.TargetCrs)
		}
	}
}