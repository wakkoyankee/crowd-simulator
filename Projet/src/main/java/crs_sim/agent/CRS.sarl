/** 
 * 
 */
package crs_sim.^agent

import crs_sim.environment.Influence
import crs_sim.environment.InfluenceEvent
import crs_sim.environment.Percept
import crs_sim.environment.PerceptionEvent
import crs_sim.utils.Action
import crs_sim.utils.Types
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.ParticipantJoined
import io.sarl.core.ParticipantLeft
import io.sarl.core.SpaceCreated
import io.sarl.core.SpaceDestroyed
import java.util.ArrayList
import org.arakhne.afc.math.geometry.d2.d.Circle2d
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/** 
 * @author Thomas
 * 
 */
agent CRS {
	uses Logging
	uses DefaultContextInteractions
	
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The agent CRS was started.")
		
	}

	on PerceptionEvent {
		var body = occurrence.body as Circle2d
		var perceptions = occurrence.perceptions as ArrayList<Percept>
		var mindist : double = 100000.0
		var seeAgg = false
		var obj : Percept
		
		for (percept : perceptions) {
			if (percept.getName() == Types.protestor_agg) {//see aggressive
				seeAgg = true
				var tmp = body.getDistance(percept.getShape() as Circle2d)
				if (tmp < mindist){//get the closest aggressive protestor
					mindist = tmp
					obj = percept
				}
			}
		}
		
		if (seeAgg == false) {//no aggressive protestor
			var inf = new Influence(getID(), Action.standby, Types.crs)
			emit(new InfluenceEvent(inf))[it.UUID == occurrence.source.UUID]
		}
		else{
			if (mindist <= 50) { // if the aggressive protestor is close enough arrest
				var inf = new Influence(getID(), Action.arrest, Types.crs, obj.getUuid())
				emit(new InfluenceEvent(inf))[it.UUID == occurrence.source.UUID]
			}
			else {
				var inf = new Influence(getID(), Action.move, Types.crs, new Vector2d(0,0))//to change
				emit(new InfluenceEvent(inf))[it.UUID == occurrence.source.UUID]
			}
		}
		
		
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent CRS was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on SpaceCreated {
		// Event trigger when a space is created into one of the contexts where the agent is.
	}

	on SpaceDestroyed {
		// Event trigger when a space is destroyed from one of the contexts where the agent is.
	}

	on ParticipantJoined {
		// Event trigger when a participant has joined a space.
	}

	on ParticipantLeft {
		// Event trigger when a participant has left a space.
	}
}
