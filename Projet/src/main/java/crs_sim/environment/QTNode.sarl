/** 
 * 
 */
package crs_sim.environment

import crs_sim.body.EnvObject
import crs_sim.utils.CRS_Sim_Utils
import crs_sim.utils.ParamSimu
import crs_sim.utils.Types
import java.util.ArrayList
import java.util.Collection
import java.util.List
import org.arakhne.afc.math.geometry.d2.d.Circle2d
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d
import org.arakhne.afc.math.tree.node.QuadTreeNode
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * @author Thomas
 * 
 */
class QTNode extends QuadTreeNode<EnvObject, QTNode> {

		@Accessors(PUBLIC_GETTER)
		val area : Rectangle2d
		
		new (area : Rectangle2d) {
			super();
			this.area = area
		}

		/** Construct a node.
	 * @param data are the initial user data
	 */
		new (collec : Collection<EnvObject>, area : Rectangle2d) {
			super(collec)
			this.area = area
		}
		
		def insert(object :EnvObject) : void{			
			
			if ((CRS_Sim_Utils.AinB(object.area, area)) 
				&& (getUserDataCount() < ParamSimu.maxObjectsPerChild)) {
				addUserData(object) 		// ajouter dans l'object courant
			} else if (CRS_Sim_Utils.AinB(object.area, area) 
				&& getUserDataCount() >= ParamSimu.maxObjectsPerChild) {
					
				if(getNotNullChildCount()<=0 /*je n ai pas d enfants getFirstChild() == null?*/){
					 initChilds()
					 //essayer de dispatcher les éléments dans les fils
				}
				switch (CRS_Sim_Utils.childFit(object.area,area)){
					case 0:
						//fit nowhere
						addUserData(object)
					case 1:
						firstChild.insert(object)
					case 2:
						secondChild.insert(object)					
					case 3:
						thirdChild.insert(object)
					case 4:
						fourthChild.insert(object)
				}
			} else {
				// does not fit un current node
//				throw new Exception(
//				"Objet : " + object.getClass.getName + 
//				/*" Position : " + object.area + */" ne rentre pas dans le noeud courant");
			}			
		}
		
		def initChilds() {
			var rect = new Rectangle2d()
			if(firstChild != null && secondChild != null &&
				thirdChild != null && fourthChild != null
			) return false
			else{
				// NW				
				setFirstChild(new QTNode(
					new Rectangle2d(area.getMinX, area.getMinY, area.getMaxX / 2, area.getMaxY / 2)
				))
						
				// NE
				setSecondChild(new QTNode(
					new Rectangle2d(area.getMaxX / 2, area.getMinY, area.getMaxX, area.getMaxY / 2)
				))
				
				// SW
				setThirdChild(new QTNode(
					new Rectangle2d(area.getMinX, area.getMaxY/2, area.getMaxX/2, area.getMaxY)
				))
				
				// SE
				setFourthChild(	new QTNode(
					new Rectangle2d(area.getMaxX / 2, area.getMaxY / 2, area.getMaxX, area.getMaxY)
				))
				
				return true
			}
		}

	def getBodies() : List<Percept> {
		var objects = getAllUserData
		var result : List<Percept> = new ArrayList<Percept>
		for (object : objects) {
				result.add(new Percept(
					object.area,
					object.uuid,
					null //ca va changer
				))						
		}
		return result.toList
	}

	def getPercept(perception : Circle2d): List<Percept> {
		var objects = getAllUserData
		var result : List<Percept> = new ArrayList<Percept>
		for (object : objects){
			if (perception.intersects(object.area))
				result.add(new Percept(
					object.area,
					object.uuid,
					Types.protestor_neutral // ça va changer
				))					
		}
		return result.toList
	}

	def getPercept(perception : Rectangle2d) : List<Percept> {
		var objects = getAllUserData
		var result : List<Percept> = new ArrayList<Percept>
		for (object : objects) {
			if (perception.intersects(object.area))
				result.add(new Percept(
					object.area,
					object.uuid,
					Types.building // ça va changer
				))
		}
		return result.toList
	}

	def moveBody(body: EnvObject, newLocX: int, newLocY: int){
		print("attention marche mal et permet de déplacer uniquement des pnj")
		if (body.area instanceof Circle2d) {
//			body.area as Circle2d		
			body.area = new Circle2d(newLocX, newLocY, 1)
			//			body.area.setX()
//			body.area.setY()
//			body.area.setRadius()
		} else if (body.area instanceof Rectangle2d){
			
		}else
			print("What is that body I do not know it get it out of me\n")
			'
'
		
	}
}
