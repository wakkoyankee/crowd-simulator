/** 
 * 
 */
package crs_sim.environment

import crs_sim.^agent.Protestor
import crs_sim.body.EnvObject
import crs_sim.body.ProtestorBody
import crs_sim.ui.Window
import crs_sim.utils.CRS_Sim_Utils
import crs_sim.utils.ParamSimu
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.ParticipantJoined
import io.sarl.core.ParticipantLeft
import io.sarl.core.Schedules
import io.sarl.core.SpaceCreated
import io.sarl.core.SpaceDestroyed
import java.util.ArrayList
import java.util.Random
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Circle2d
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d
import crs_sim.utils.GraphSearch_Utils

/** 
 * @author hadrien
 * 
 */
 
 // papyrus
 
agent EnvironmentAgent {
	uses Logging
	uses Lifecycle
	uses DefaultContextInteractions
	uses Schedules
	
	var rootTree : QTNode
	var collec = new ArrayList<EnvObject>()
	var agentSpawned : int = 0
	var ids : ArrayList<UUID>
	
	on Initialize {

		info("The agent environment was started.")
	
		var rand : Random = new Random()
		var b : int[] = newIntArrayOfSize(ParamSimu.nbProtestors)
		var t : int[] = newIntArrayOfSize(ParamSimu.nbProtestors)
		for (var i = 0; i < ParamSimu.nbProtestors; i++) {
			var r1 = rand.nextInt(101)
			var r2 =  rand.nextInt(11)
			b.set(i, r1)
			t.set(i, r2)
			if (r1 < ParamSimu.maxPanic) {
				ParamSimu.CollecProtestor.add(new ProtestorBody(ParamSimu.initCollecProtestor.get(i), "panic"))
			} else if (r1 > ParamSimu.minAggressive) {
				ParamSimu.CollecProtestor.add(new ProtestorBody(ParamSimu.initCollecProtestor.get(i), "agg"))
			} else {
				ParamSimu.CollecProtestor.add(new ProtestorBody(ParamSimu.initCollecProtestor.get(i), "neutral"))
			}
		}
		

		//// CREATION ENVIRONEMENT  ////
		
		// collec.addAll(ParamSimu.initCollecCRS)
		// collec.addAll(ParamSimu.initCollecProtestor)
		// collec.addAll(ParamSimu.initCollecBuilding)
		collec.addAll(ParamSimu.CollecProtestor)
		collec.addAll(ParamSimu.initCollecCRS)
		collec.addAll(ParamSimu.initplaceDesJacobins)
		rootTree = new QTNode(
			new Rectangle2d(0, 0, ParamSimu.mapSizeX, ParamSimu.mapSizeY)
		)
		CRS_Sim_Utils.buildTree(rootTree, collec)
		
		print("\nBFS\n")
		GraphSearch_Utils.BFS(rootTree)
		print("\nPerceptBFSUnoptimized\n")
		GraphSearch_Utils.PerceptBFSUnoptimized(rootTree,new Circle2d(350,350,150))
		print("\nPerceptBFS\n")
		GraphSearch_Utils.PerceptBFS(rootTree, new Circle2d(350, 350, 150))

		println("PÃ¨re : " + rootTree)
		println("NW : " + rootTree.firstChild)
		println("NE : " + rootTree.secondChild)
		println("SW : " + rootTree.thirdChild)
		println("SE : " + rootTree.fourthChild)

		// println("Test A in B : " + Rectangle2afp.containsRectangleRectangle(300, 200, 350, 250,
		// 0, 0, 500, 500));
		//
		// println("Test B in A : " + Rectangle2afp.containsRectangleRectangle(
		// 0,
		// 0,
		// 500,
		// 500,
		// 300,
		// 200,
		// 350,
		// 250
// ));
		
//		println("Test 1 : " + new Rectangle2d(100, 100, 40, 20).intersects(new Rectangle2d(0, 0, 1000, 1000)))
		// println("Test 2 : " + new Rectangle2d(0, 0, 1000, 1000).intersects(new Rectangle2d(100, 100, 40, 20)))
		// println("Test 3 : " + new Rectangle2d(100, 100, 40, 20).intersects(new Rectangle2d(110, 110, 40, 20)))
		// println("Test 4 : " + new Rectangle2d(110, 110, 40, 20).intersects(new Rectangle2d(100, 100, 40, 20)))
		// println("Test 5: " + new Rectangle2d(0, 0, 10, 10).intersects(new Rectangle2d(20, 20, 10, 10)))
		// println("Test 6 : " + new Rectangle2d(20, 20, 10, 10).intersects(new Rectangle2d(0, 0, 10, 10)))
				
		//// SPAWN DES AGENTS  ////
		
		this.ids = new ArrayList()
		for (var i = 0; i < ParamSimu.nbProtestors; i++) {
			var uuid = UUID::randomUUID
			this.ids.add(uuid)
			Protestor.spawnInContextWithID(uuid, defaultContext, b.get(i), t.get(i))
		}
		
		
	}

	
	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent environment was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
		this.agentSpawned++
		if(this.agentSpawned == ParamSimu.nbProtestors){
			info("All agents have spawned")
			StartSim()
		}
		
		
	}

	def StartSim() {

		//// BOUCLE DE SIMULATION ////
		
		for (var i = 0; i < ParamSimu.nbProtestors; i++) {
			//getList 
			var id = this.ids.get(i)
			emit(new PerceptionEvent(3))[it.UUID == id]
		}
		
		// var t : int = 0
		
		// while(1){
		
			// get perceptions
			// actions -> new list
			// for all agents
				// send perception
				// get actions
			// reactions -> resolveconflict (env , actions)
		// for all reactions
				// apply(env, reaction)
		// t += 1
			
		
		
		
		// Test UI //
		var win = new Window()
		var visibleObj : ArrayList<Percept> = new ArrayList<Percept>()
		for (envObj : collec) {
			if (envObj.area instanceof Rectangle2d) {
				var tmp : Rectangle2d = envObj.area as Rectangle2d
				// visibleObj.add(envObj.area.getMinX(), envObj.area.getMinY(), envObj.area.getMaxX()-envObj.area.getMinX(),envObj.area.getMaxY()-envObj.area.getMinY())
				info(tmp.getMinX)
			} else {
				// visibleObj.add(new Percept(envObj.area.getMinX(), envObj.area.getMinY(), envObj.area.getMaxX()-envObj.area.getMinX(),envObj.area.getMaxY()-envObj.area.getMinY())
			}
		}
	}



	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on SpaceCreated {
		// Event trigger when a space is created into one of the contexts where the agent is.
	}

	on SpaceDestroyed {
		// Event trigger when a space is destroyed from one of the contexts where the agent is.
	}

	on ParticipantJoined {
		// Event trigger when a participant has joined a space.
	}

	on ParticipantLeft {
		// Event trigger when a participant has left a space.
	}
}
