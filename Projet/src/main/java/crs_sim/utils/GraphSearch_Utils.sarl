/** 
 * 
 */
package crs_sim.utils

import crs_sim.environment.Percept
import crs_sim.environment.QTNode
import java.util.ArrayList
import java.util.List
import org.arakhne.afc.math.geometry.d2.d.Circle2d
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d

/** 
 * @author Thomas
 * 
 */
class GraphSearch_Utils {

	// to force the class to be static
	private new {
	}
	
	// iterative BFS (useful to display the map)
	static def BFS(root : QTNode) : List<Percept> {
		var result : List<Percept>
		var stack : List<QTNode>
		var currentNode : QTNode

		result = new ArrayList<Percept>
		stack = new ArrayList<QTNode>

		currentNode = root
		if (!currentNode.isLeaf) {
			stack.add(currentNode.firstChild)
			stack.add(currentNode.secondChild)
			stack.add(currentNode.thirdChild)
			stack.add(currentNode.fourthChild)
		}
		result.addAll(currentNode.getBodies) // à faire dans les bodies
		while (!stack.isEmpty) {
			currentNode = stack.get(0)
			stack.remove(0)
			if (!currentNode.isLeaf) {
				stack.add(currentNode.firstChild)
				stack.add(currentNode.secondChild)
				stack.add(currentNode.thirdChild)
				stack.add(currentNode.fourthChild)
			}
			result.addAll(currentNode.getBodies) 	// à faire dans les bodies
		}
		return result;
	}

	// perception iterative BFS
	static def PerceptBFSUnoptimized(root : QTNode, perception: Circle2d) : List<Percept> {
		var result : List<Percept>
		var stack : List<QTNode>
		var currentNode : QTNode

		result = new ArrayList<Percept>
		stack = new ArrayList<QTNode>

		currentNode = root
		if (!currentNode.isLeaf) {
			stack.add(currentNode.firstChild)
			stack.add(currentNode.secondChild)
			stack.add(currentNode.thirdChild)
			stack.add(currentNode.fourthChild)
		}
		result.addAll(currentNode.getPercept(perception))
		while (!stack.isEmpty) {
			currentNode = stack.get(0)
			stack.remove(0)
			if (!currentNode.isLeaf) {
				stack.add(currentNode.firstChild)
				stack.add(currentNode.secondChild)
				stack.add(currentNode.thirdChild)
				stack.add(currentNode.fourthChild)
			}
			result.addAll(currentNode.getPercept(perception))
		}
//		print(result.size)
//		for (var i = 0; i < result.size; i++) {
//			print(result.get(i).shape)
//		}
		return result;
	}

	// perception iterative BFS
	static def PerceptBFS(root : QTNode, perception: Circle2d) : List<Percept> {
		var result : List<Percept>
		var stack : List<QTNode>
		var currentNode : QTNode
//		var perception : Circle2d = body.area as Circle2d
//		if(body instanceof ProtestorBody)	
//			perception.radius = ParamSimu.RadiusPerceptProtestor
//		else if (body instanceof CRSBody)
//			perception.radius = ParamSimu.RadiusPerceptCrs
//		else
//			println("La perception ne concerne que les agents humains")
		result = new ArrayList<Percept>
		stack = new ArrayList<QTNode>

		currentNode = root
		if (!currentNode.isLeaf) {
			if (perception.intersects(currentNode.firstChild.area))
				stack.add(currentNode.firstChild)
			if (perception.intersects(currentNode.secondChild.area))
				stack.add(currentNode.secondChild)
			if (perception.intersects(currentNode.thirdChild.area))
				stack.add(currentNode.thirdChild)
			if (perception.intersects(currentNode.fourthChild.area))
				stack.add(currentNode.fourthChild)
		}
		result.addAll(currentNode.getPercept(perception))
		while (!stack.isEmpty) {
			currentNode = stack.get(0)
			stack.remove(0)
			if (!currentNode.isLeaf) {
				if (perception.intersects(currentNode.firstChild.area))
					stack.add(currentNode.firstChild)
				if (perception.intersects(currentNode.secondChild.area))
					stack.add(currentNode.secondChild)
				if (perception.intersects(currentNode.thirdChild.area))
					stack.add(currentNode.thirdChild)
				if (perception.intersects(currentNode.fourthChild.area))
					stack.add(currentNode.fourthChild)
			}
			result.addAll(currentNode.getPercept(perception)) 	// à faire dans les bodies
		}
//		result.remove(body)
//		print(result.size)
//		for(var i = 0; i<result.size; i++){
//			print(result.get(i).shape)
//		}
		return result;
	}
	
	static def printGraphDebug(root : QTNode, fullInfoShape : boolean) : void {
		var listResult : List<Percept>
		var circle : Circle2d
		var rect : Rectangle2d 
		listResult = BFS(root)
		print("\n___________________________________DEBUG_GRAPH_START___________________________________")
		for(result : listResult){
			println("\n\nType : " + result.name)
			println("UUID : " + result.uuid)
			if (fullInfoShape)
				println("Shape : " + result.shape)
			else{
				if (result.shape instanceof Circle2d) {
					circle = result.shape as Circle2d
					println("X : " + circle.getX + "  Y : " + circle.getY)
				} else if(result.shape instanceof Rectangle2d){
					rect = result.shape as Rectangle2d
					println("X : " + circle.minX + "  Y : " + circle.minY + "  top left corner")
				}
			}
				
		}
		print("___________________________________DEBUG_GRAPH_END___________________________________\n")
		
	}

	static def printGraphDebug(root : QTNode, fullInfoShape : boolean,type : Types) : void {
		var listResult : List<Percept>
		var circle : Circle2d
		var rect : Rectangle2d
		listResult = BFS(root)
		print("\n___________________________________DEBUG_GRAPH_START___________________________________")
		for (result : listResult) {
			if(result.name == type){
				println("\n\nType : " + result.name)
				println("UUID : " + result.uuid)
				if (fullInfoShape)
					println("Shape : " + result.shape)
				else {
					if (result.shape instanceof Circle2d) {
						circle = result.shape as Circle2d
						println("X : " + circle.getX + "  Y : " + circle.getY)
					} else if (result.shape instanceof Rectangle2d) {
						rect = result.shape as Rectangle2d
						println("X : " + circle.minX + "  Y : " + circle.minY + "  top left corner")
					}
				}
			}
		}
		print("___________________________________DEBUG_GRAPH_END___________________________________\n")

	}

	//	// iterative DFS
//	static def DFS(root : QTNode) : List<Percept> {
//		var result : List<Percept>
//		var terminated : List<UUID>
//		var currentNode : Iterator<QTNode>
//
//		result = new ArrayList<Percept>
//		terminated = new ArrayList<UUID>
//
//		currentNode = root.iterator
//		if (!currentNode.hasNext)
//			terminated.add(currentNode.uuid) // uuid du noeud pas des bodies
//		result.add(currentNode.getPercept) // à faire dans les bodies
//		while (!terminated.contains(root.uuid)) {
//			currentNode = currentNode.getNextDFSChild.iterator // getNextDFSChild will give the first direct
//			// child not terminated or will search higher the next one
//			if (!currentNode.hasNext)
//				terminated.add(currentNode.uuid) // uuid du noeud pas des bodies
//			result.add(currentNode.getPercept) 			// à faire dans les bodies
//		}
//		return result
//	}
//
//	static def perceptionDFS(node : QTNode, circle : Circle2d) : List<Percept> {
//	}

}
