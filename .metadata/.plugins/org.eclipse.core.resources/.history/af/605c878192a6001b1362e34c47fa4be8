/** 
 * 
 */
package crs_sim.environment

import crs_sim.body.EnvObject
import crs_sim.utils.CRS_Sim_Utils
import crs_sim.utils.ParamSimu
import java.util.Collection
import java.util.Collections
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d
import org.arakhne.afc.math.tree.node.AbstractParentlessTreeNode.DataCollection
import org.arakhne.afc.math.tree.node.QuadTreeNode

/** 
 * @author Thomas
 * 
 */
class QTNode extends QuadTreeNode<EnvObject, QTNode>{

		val area : Rectangle2d
		
		new (area : Rectangle2d) {
			super();
			this.area = area
		}

		/** Construct a node.
	 * @param data are the initial user data
	 */
		new (collec : Collection<EnvObject>, area : Rectangle2d) {
			super(collec)
			this.area = area
		}
		
		def insert(object :EnvObject) : void{
			// rules of insertion
			// set pour ajouter un fils
			// add pour un objet
			
			// il doit y avoir des fonctions disponibles sur les rectangles
			// , comme : boolean intersect(Rectangle2d)
			
			
			if (CRS_Sim_Utils.AinB(object.getArea(), area)) {
				addUserData(Collections.singleton(EnvObject)) 		// ajouter dans l'object courant
			} else {
				if (DataCollection.size() < ParamSimu.maxObjectsPerChild) {
					add // ajouter dans le fils concerné
				} else {
					if(si une fois le graph coupé l objet ne sera pas à cheval){
						add
					} else {
						set
						setSecondChild etc..
					}
						
				}
			}
			
			
		}
		
}
